generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Signatures {
    eoa       String @id
    signature String @db.Text
    message   String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    address String @id @unique

    // Media
    name String?

    // Steward
    stewardApplicationDate  DateTime
    StewardVotesAsCandidate StewardVote[] @relation("CandidateRelation")
    StewardVotesAsVoter     StewardVote[] @relation("VoterRelation")

    // Pods & Proposals
    pods      Pod[]      @relation("AdminsRelation")
    proposals Proposal[]

    // Meta
    JoinedAt  DateTime @default(now())
    UpdatedAt DateTime @default(now()) @updatedAt

    // Relations
    createdPods      Pod[]      @relation("CreatedPodRelation")
    updatedPods      Pod[]      @relation("UpdatedPodRelation")
    createdProposals Proposal[] @relation("CreatedProposalRelation")
    updatedProposals Proposal[] @relation("UpdatedProposalRelation")
}

model StewardVote {
    id Int @id @default(autoincrement())

    // Voter
    voter        User   @relation("VoterRelation", fields: [voterAddress], references: [address])
    voterAddress String

    // Candidate
    candidate        User   @relation("CandidateRelation", fields: [candidateAddress], references: [address])
    candidateAddress String
}

model Pod {
    id          Int    @id @default(autoincrement())
    // Media
    name        String
    description String
    picture     String

    // Relations
    admins      User[]     @relation("AdminsRelation")
    discussions String[]
    proposals   Proposal[]

    // Meta
    createdBy   User   @relation("CreatedPodRelation", fields: [createdById], references: [address])
    createdById String
    updatedBy   User   @relation("UpdatedPodRelation", fields: [updatedById], references: [address])
    updatedById String
}

model Proposal {
    id Int @id @default(autoincrement())

    // Relations
    pod      Pod    @relation(fields: [podId], references: [id])
    podId    Int
    author   User   @relation(fields: [authorId], references: [address])
    authorId String

    // Meta
    createdBy   User   @relation("CreatedProposalRelation", fields: [createdById], references: [address])
    createdById String
    updatedBy   User   @relation("UpdatedProposalRelation", fields: [updatedById], references: [address])
    updatedById String
}
